```python
import pygame
import random
import numpy as np
import asyncio
import platform

# Khởi tạo Pygame
pygame.init()

# Thiết lập cửa sổ game
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Trò Chơi Bouncing Ball")

# Màu sắc
BG_COLOR = (30, 30, 30)  # Màu nền (gần đen)
BALL_COLOR = (255, 165, 0)  # Màu bóng (cam)

# Thuộc tính bóng
BALL_RADIUS = 20
ball_pos = [WIDTH // 2, HEIGHT // 2]  # Vị trí ban đầu: giữa màn hình
ball_speed = [random.choice([-5, 5]), random.choice([-5, 5])]  # Tốc độ ngẫu nhiên

# Tạo âm thanh va chạm (sử dụng NumPy vì Pyodide không hỗ trợ file cục bộ)
sample_rate = 44100
duration = 0.1  # Thời gian âm thanh (ngắn)
t = np.linspace(0, duration, int(sample_rate * duration), False)
# Tạo sóng sine đơn giản cho âm thanh va chạm
sound_array = (np.sin(440 * 2 * np.pi * t) * 32767).astype(np.int16)
# Chuyển thành mảng 2D cho âm thanh stereo
sound_array_stereo = np.column_stack((sound_array, sound_array))
bounce_sound = pygame.sndarray.make_sound(sound_array_stereo)

# Tốc độ khung hình
FPS = 60

# Đồng hồ để kiểm soát FPS
clock = pygame.time.Clock()

def setup():
    """Thiết lập ban đầu cho game"""
    pass

def update_loop():
    """Cập nhật trạng thái game mỗi khung hình"""
    global ball_pos, ball_speed

    # Cập nhật vị trí bóng
    ball_pos[0] += ball_speed[0]
    ball_pos[1] += ball_speed[1]

    # Xử lý va chạm với cạnh màn hình
    if ball_pos[0] <= BALL_RADIUS or ball_pos[0] >= WIDTH - BALL_RADIUS:
        ball_speed[0] = -ball_speed[0]
        bounce_sound.play()
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_speed[1] = -ball_speed[1]
        bounce_sound.play()

    # Xóa màn hình
    screen.fill(BG_COLOR)

    # Vẽ bóng
    pygame.draw.circle(screen, BALL_COLOR, (int(ball_pos[0]), int(ball_pos[1])), BALL_RADIUS)

    # Cập nhật màn hình
    pygame.display.flip()

async def main():
    """Vòng lặp game chính, tương thích với Pyodide"""
    setup()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return  # Thoát game khi đóng cửa sổ

        update_loop()
        await asyncio.sleep(1.0 / FPS)  # Điều chỉnh tốc độ khung hình

# Chạy game
if platform.system() == "Emscripten":
    asyncio.ensure_future(main())
else:
    if __name__ == "__main__":
        asyncio.run(main())
```
