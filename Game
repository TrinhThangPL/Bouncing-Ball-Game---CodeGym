import pygame
import random
import numpy as np
import asyncio
import platform

# Initialize Pygame
pygame.init()

# Set up the game window
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Bouncing Ball Game")

# Colors
BG_COLOR = (30, 30, 30)
BALL_COLOR = (255, 165, 0)

# Ball properties
BALL_RADIUS = 20
ball_pos = [WIDTH // 2, HEIGHT // 2]
ball_speed = [random.choice([-5, 5]), random.choice([-5, 5])]

# Create a simple bounce sound using NumPy array (since local file I/O is not supported)
sample_rate = 44100
duration = 0.1  # Short sound duration
t = np.linspace(0, duration, int(sample_rate * duration), False)
# Generate a simple sine wave for bounce sound
sound_array = (np.sin(440 * 2 * np.pi * t) * 32767).astype(np.int16)
# Convert to 2D array for stereo compatibility
sound_array_stereo = np.column_stack((sound_array, sound_array))
bounce_sound = pygame.sndarray.make_sound(sound_array_stereo)

# Frame rate
FPS = 60

# Clock for controlling frame rate
clock = pygame.time.Clock()

def setup():
    """Initialize game settings (called once at start)"""
    pass

def update_loop():
    """Update game state each frame"""
    global ball_pos, ball_speed

    # Update ball position
    ball_pos[0] += ball_speed[0]
    ball_pos[1] += ball_speed[1]

    # Handle collisions with window edges
    if ball_pos[0] <= BALL_RADIUS or ball_pos[0] >= WIDTH - BALL_RADIUS:
        ball_speed[0] = -ball_speed[0]
        bounce_sound.play()
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_speed[1] = -ball_speed[1]
        bounce_sound.play()

    # Clear screen
    screen.fill(BG_COLOR)

    # Draw ball
    pygame.draw.circle(screen, BALL_COLOR, (int(ball_pos[0]), int(ball_pos[1])), BALL_RADIUS)

    # Update display
    pygame.display.flip()

async def main():
    """Main game loop for Pyodide compatibility"""
    setup()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return  # Exit the loop to stop the game

        update_loop()
        await asyncio.sleep(1.0 / FPS)  # Control frame rate

# Run the game
if platform.system() == "Emscripten":
    asyncio.ensure_future(main())
else:
    if __name__ == "__main__":
        asyncio.run(main())
